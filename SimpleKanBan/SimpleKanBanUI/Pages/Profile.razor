@page "/Profile"
@attribute [Authorize]
@inject AuthenticationStateProvider authProvider;
@inject IItemData itemData
@inject IUserData userData
@inject NavigationManager navManager

<h1 class="page-heading text-uppercase mb-4">My Profile</h1>

<div class="row">
    <div class="col-12 close-button-section">
        <button class="btn btn-close" @onclick="ClosePage"></button>
    </div>
</div>

<div class="form-layout mb-3">
    <h2 class="my-submission-heading">My account</h2>
    <p2 class="my-submission-text">
        <a href="MicrosoftIdentity/Account/EditProfile">
            Edit My Profile
        </a>
    </p2>
</div>

@if (newItems?.Count > 0)
{
    <div class="form-layout mb-3">
        <h2 class="my-submission-heading">New Items</h2>
        <p class="my-submission-text">These are your new items.</p>

        @foreach (var newItem in newItems)
        {
            <hr class="my-submission-separator"/>
            <div class="fw-bold item-detail-item">
                @newItem.Title
            </div>
            <p class="my-submission-text">
                @newItem.DateCreated.ToString("dd.MM.yy")
            </p>
            <p class="my-submission-text">
                @newItem.Description
            </p>
        }
    </div>
}

@if (inProgressItems?.Count > 0)
{
    <div class="form-layout mb-3">
        <h2 class="my-submission-heading">In Progress Items</h2>
        <p class="my-submission-text">These are the items you are currently working on.</p>

        @foreach (var progressItem in inProgressItems) //TODO - Create component like on an Index page
        {
            <hr class="my-submission-separator"/>
            <div class="fw-bold item-detail-item">
                @progressItem.Title
            </div>
            <p class="my-submission-text">
                @progressItem.DateCreated.ToString("dd.MM.yy")
            </p>
            <p class="my-submission-text">
                @progressItem.Description
            </p>
        }
    </div>
}

@if (inTestingItems?.Count > 0)
{
    <div class="form-layout mb-3">
        <h2 class="my-submission-heading">In Testing Items</h2>
        <p class="my-submission-text">These are the your items that are currently under the test.</p>

        @foreach (var testItem in inTestingItems)
        {
            <hr class ="my-submission-separator"/>
            <div class="fw-bold item-detail-item">
                @testItem.Title
            </div>
            <p class="my-submission-text">
                @testItem.DateCreated.ToString("dd.MM.yy")
            </p>
            <p class="my-submission-text">
                @testItem.Description
            </p>
        }
    </div>
}

@if (doneItems?.Count > 0)
{
    <div class="form-layout mb-3">
        <h2 class="my-submission-heading">In Testing Items</h2>
        <p class="my-submission-text">These are the your items that are finished.</p>

        @foreach (var doneItem in doneItems)
        {
            <hr class ="my-submission-separator"/>
            <div class="fw-bold item-detail-item">
                @doneItem.Title
            </div>
            <p class="my-submission-text">
                @doneItem.DateCreated.ToString("dd.MM.yy")
            </p>
            <p class="my-submission-text">
                @doneItem.Description
            </p>
        }
    </div>
}

@code {
    private UserModel loggedInUser;
    private List<ItemModel> userItems;
    private List<ItemModel> newItems;
    private List<ItemModel> inProgressItems;
    private List<ItemModel> inTestingItems;
    private List<ItemModel> doneItems;

    protected async override Task OnInitializedAsync()
    {
        loggedInUser = await authProvider.GetUserFromAuth(userData);

        var results = await itemData.GetAllUserItems(loggedInUser.Id);

        if (loggedInUser is not null && results is not null)
        {
            userItems = results.OrderByDescending(i => i.DateCreated).ToList();
            newItems = userItems.Where(i => i.ItemStatus.StatusName.Equals(Enum.GetName(Statuses.New))).ToList();
            inProgressItems = userItems.Where(i => i.ItemStatus.StatusName.Equals(Enum.GetName(Statuses.Progress))).ToList();
            inTestingItems = userItems.Where(i => i.ItemStatus.StatusName.Equals(Enum.GetName(Statuses.Testing))).ToList();
            doneItems = userItems.Where(i => i.ItemStatus.StatusName.Equals(Enum.GetName(Statuses.Done))).ToList();
        }
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }
}
