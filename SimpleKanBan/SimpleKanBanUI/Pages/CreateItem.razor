@page "/Create"
@attribute [Authorize]
@using SimpleKanBanUI.Models;
@using SimpleKanBanUI.Components;
@inject AuthenticationStateProvider authProvider;
@inject ICategoryData categoryData
@inject IStatusData statusData
@inject IItemData itemData
@inject IUserData userData
@inject NavigationManager navManager

<h1 class="page-heading text-uppercase mb-4">Create New Item</h1>

<div class="row justify-content-center create-form">
    <div class="col-xl-8 col-lg-10 form-layout">
        <div class="close-button-section">
            <button class="btn" @onclick="ClosePage">X</button>
        </div>
        @if (categories is not null)
        {
            <EditForm Model="item" OnValidSubmit="Create">
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <div class="input-section">
                    <label class="form-label fw-bold text-uppercase" for="item-text">Item</label>
                    <div class="input-description">Focus on the topic of an item.</div>
                    <InputText class="form-control" id="item-text" @bind-Value="item.Title"/>
                </div>
                <div class="input-section">
                    <label class="form-label fw-bold text-uppercase" for="category">Category</label>
                    <div>Choose one category.</div>
                    <div class="col-lg-8">
                        <MyInputRadiGroup id="category" @bind-Value="item.CategoryId">
                            @foreach (var c in categories)
                            {
                                <div class="radio-item-group">
                                    <InputRadio Value="@c.Id" id="@c.Id" />
                                    <label for="@c.Id" >@c.CategoryName - @c.CategoryDescription</label>
                                </div>
                            }
                        </MyInputRadiGroup>
                    </div>
                </div>
                <div class="input-section">
                    <label class="form-label fw-bold text-uppercase" for="description">Description</label>
                    <div class="input-description">Describe your item.</div>
                    <InputTextArea class="form-control" id="description" @bind-Value="item.Description" />
                </div>
                <div class="center-children">
                    <button class="btn btn-main btn-lg text-uppercase" type="submit">Create</button>
                </div>
            </EditForm>
        }
    </div>
</div>

@code {
    private CreateItemModel item = new();
    private List<CategoryModel> categories;
    private List<StatusModel> statuses;
    private UserModel loggedInUser;

    protected override async Task OnInitializedAsync()
    {
        categories = await categoryData.GetAllCategories();
        statuses = await statusData.GetAllStatuses();

        loggedInUser = await authProvider.GetUserFromAuth(userData);
    }

    private async Task Create()
    {
        ItemModel i = new();
        i.Title = item.Title;
        i.Description = item.Description;
        i.Author = new BasicUserModel(loggedInUser);
        i.DateCreated = DateTime.UtcNow;
        i.DateModified = DateTime.UtcNow;
        i.ItemStatus = statuses[0];
        i.ItemCategory = categories.Where(c => c.Id == item.CategoryId).FirstOrDefault();

        if (i.ItemCategory is null)
        {
            item.CategoryId = "";
            return;
        }

        await itemData.CreateItem(i);
        item = new();
        ClosePage();
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }
}
