@page "/"
@inject ICategoryData categoryData
@inject IStatusData statusData
@inject IItemData itemData
@inject IUserData userData
@inject AuthenticationStateProvider authProvider;
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage

<h1>Training KanBan</h1>

<div>
    <button @onclick="NewItemPage">New item</button>
</div>

<div class="row">
    @if (items is not null)
    {
        <div class="column">
            <h2>New</h2>
            @if (newItems is not null)
            {
                foreach (var newItem in newItems)
                {
                   <ItemComponent Item = "newItem"/>
                }
            }
        </div>
        <div class="column">
            <h2>In Progress</h2>
            @if (inProgressItems is not null)
            {
                foreach (var progressItem in inProgressItems)
                {
                    <ItemComponent Item="progressItem" />
                }
            }
        </div>
        <div class="column">
            <h2>In Testing</h2>
            @if (inTestingItems is not null)
            {
                foreach (var testingItem in inTestingItems)
                {
                    <ItemComponent Item="testingItem" />
                }
            }
        </div>
        <div class="column">
            <h2>Done</h2>
            @if (doneItems is not null)
            {
                foreach (var doneItem in doneItems)
                {
                    <ItemComponent Item="doneItem" />
                }
            }
        </div>
    }
</div>

@code{
    private List<ItemModel> items;
    private List<ItemModel> newItems;
    private List<ItemModel> inProgressItems;
    private List<ItemModel> inTestingItems;
    private List<ItemModel> doneItems;
    private List<CategoryModel> categories;
    private List<StatusModel> statuses;
    private UserModel loggedInUser;

    private string searchText = "";

    protected async override Task OnInitializedAsync()
    {
        categories = await categoryData.GetAllCategories();
        statuses = await statusData.GetAllStatuses();
        await LoadAndVerifyUser();
    }

    private async Task LoadAndVerifyUser()
    {
        var authState = await authProvider.GetAuthenticationStateAsync();
        string objectId = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("objectidentifier"))?.Value;

        if (string.IsNullOrWhiteSpace(objectId) == false)
        {
            loggedInUser = await userData.GetUserFromAuthentication(objectId) ?? new();

            string firstName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("givenname"))?.Value;
            string lastName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("surname"))?.Value;
            string displaytName = authState.User.Claims.FirstOrDefault(c => c.Type.Equals("name"))?.Value;
            string email = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("email"))?.Value;

            bool isDirty = false;

            if (objectId.Equals(loggedInUser.ObjectIdentifier) == false)
            {
                isDirty = true;
                loggedInUser.ObjectIdentifier = objectId;
            }
            if (firstName.Equals(loggedInUser.FirstName) == false)
            {
                isDirty = true;
                loggedInUser.FirstName = firstName;
            }
            if (lastName.Equals(loggedInUser.LastName) == false)
            {
                isDirty = true;
                loggedInUser.LastName = lastName;
            }
            if (displaytName.Equals(loggedInUser.DisplayName) == false)
            {
                isDirty = true;
                loggedInUser.DisplayName = displaytName;
            }
            if (email.Equals(loggedInUser.EmailAddress) == false)
            {
                isDirty = true;
                loggedInUser.EmailAddress = email;
            }
            if (isDirty)
            {
                if (string.IsNullOrWhiteSpace(loggedInUser.Id))
                {
                    await userData.CreateUser(loggedInUser);
                }
                else
                {
                    await userData.UpdateUser(loggedInUser);
                }
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFilterState();
            await FilterItems();
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = stringResults.Success ? stringResults.Value : "";
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(searchText), searchText);
    }

    private async Task FilterItems()
    {
        items = await itemData.GetAllItems();

        if (string.IsNullOrWhiteSpace(searchText) == false)
        {
            items = items.Where(
                i => i.Title.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }

        await SaveFilterState();

        if (items is not null)
        {
            newItems = items.Where(i => i.ItemStatus.StatusName.Equals(Enum.GetName(Statuses.New))).ToList();
            inProgressItems = items.Where(i => i.ItemStatus.StatusName.Equals(Enum.GetName(Statuses.Progress))).ToList();
            inTestingItems = items.Where(i => i.ItemStatus.StatusName.Equals(Enum.GetName(Statuses.Testing))).ToList();
            doneItems = items.Where(i => i.ItemStatus.StatusName.Equals(Enum.GetName(Statuses.Done))).ToList();
        }
    }

    private void NewItemPage()
    {
        navManager.NavigateTo("/Create");
    }
}